// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  hostings Hosting[] // Relation to Hosting model
}

model Hosting {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  title       String
  description String?
  address     String
  type        String   // apartamento, casa, etc
  rooms       Int
  rentValue   Float
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  houseRules String?

  stays       Stay[]
  payments    Payment[]
  schedules   Schedule[]
  messages    Message[]
  availability  Availability[]  // <--- Adicione esta linha
  prices        Price[]         // <--- Adicione esta linha
}

model Stay {
  id          Int      @id @default(autoincrement())
  hostingId   Int
  hosting     Hosting  @relation(fields: [hostingId], references: [id])
  guestName   String
  guestPhone  String?
  checkIn     DateTime
  checkOut    DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  reviews     Review[]
}

model Payment {
  id          Int      @id @default(autoincrement())
  hostingId   Int
  hosting     Hosting  @relation(fields: [hostingId], references: [id])
  amount      Float
  paidAt      DateTime
  method      String   // cartão, pix, dinheiro, etc
  status      String   // pago, pendente, atrasado
  reference   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Schedule {
  id          Int      @id @default(autoincrement())
  hostingId   Int
  hosting     Hosting  @relation(fields: [hostingId], references: [id])
  type        String   // checkin, checkout, limpeza, manutenção
  scheduledAt DateTime
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Message {
  id          Int      @id @default(autoincrement())
  hostingId   Int
  hosting     Hosting  @relation(fields: [hostingId], references: [id])
  to          String
  content     String
  sentAt      DateTime
  channel     String   // whatsapp, sms, email
  status      String   // enviado, erro
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Review {
  id         Int      @id @default(autoincrement())
  stayId     Int
  stay       Stay     @relation(fields: [stayId], references: [id])
  rating     Int      // 1 a 5
  comment    String?
  createdAt  DateTime @default(now())
}

model Availability {
  id         Int      @id @default(autoincrement())
  hostingId  Int
  hosting    Hosting  @relation(fields: [hostingId], references: [id])
  date       DateTime
  status     String   // disponível, ocupado, bloqueado
}

model Price {
  id         Int      @id @default(autoincrement())
  hostingId  Int
  hosting    Hosting  @relation(fields: [hostingId], references: [id])
  date       DateTime
  value      Float
}